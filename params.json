{
  "name": "Gdb commands",
  "tagline": "GDB commands to aid exploit development",
  "body": "# GDB commands to aid exploit development\r\n\r\nRemember to source each command either in the .gdbinit file or command line.\r\n```\r\n  source /path/to/file/gdb-command.py\r\n```\r\n\r\n# checksec\r\n\r\nThis command will output the status of mitigations in each loaded binary and sharedlibrary. Similar to the *checksec.sh* script.\r\n\r\nExample:\r\n```\r\n  (gdb) source gdb-checksec.py\r\n  (gdb) checksec\r\n  | NX  | PIE | Canary | Relro   | Path      \r\n  | Yes | No  | No     | Partial | /home/pwf/projects/gdb-plugins/hello_world\r\n  | Yes | Yes | No     | Partial | /lib64/ld-linux-x86-64.so.2\r\n  | Yes | Yes | Yes    | Partial | /lib/x86_64-linux-gnu/libc.so.6\r\n```\r\n\r\n# pattern_create\r\n\r\nThis command generates an acyclic pattern with a maximum length of 20280. This is the same pattern as the default output from the Metasploit pattern_create.rb tool.\r\n\r\nExample:\r\n```\r\n  (gdb) source gdb-pattern.py\r\n  (gdb) pattern_create 250\r\n  Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2A\r\n\r\n```\r\n# pattern_offset\r\n\r\nThis command finds the offset of a sequence in the pattern generated from pattern_create. \r\n\r\nExample:\r\n\r\n```\r\n(gdb) pattern_offset 9Ae0\r\n119\r\n(gdb) pattern_offset 0x30654139\r\n119\r\n(gdb) i r $rip\r\nrip            0x30654139\t0x30654139\r\n(gdb) pattern_offset rip\r\n119\r\n(gdb)\r\n```\r\n# pattern_find\r\n\r\nThis commands will find all instances of the pattern in memory. The command will display the location of the pattern, the length, and the type of memory region. This command also searches the values in registers and the values pointer to by registers, the length column for this output represents an offset into a pattern. The command takes no arguments.\r\n\r\nExample:\r\n\r\n```\r\n(gdb) r\r\nStarting program: /home/pwf/projects/gdb-plugins/hello_world Aa0Aa1Aa2Aa3A Aa0Aa1 AAAAA\r\n...snip....\r\nBreakpoint 1, 0x000000000040052d in main ()\r\n(gdb) pattern_find \r\n| Address        | Length | Region\r\n| 0x7fffffffe080 | 13     | [stack]\r\n| 0x7fffffffe08e | 6      | [stack]\r\n| Register       | 0      | rax   \r\n| Pointer        | 0      | r13\r\n(gdb)\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}